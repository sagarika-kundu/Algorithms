#include <iostream>
#include <unordered_map>
using namespace std;

unordered_map<string, int> lookup;
unordered_map<string, int>::iterator itr;
int paths(int a[][4], int n, int m, int sum){
	if(n == 0 && m == 0){
		if(sum - a[n][m] == 0)
			return 1;	
	} 
	if(sum < 0 || n < 0 || m < 0) return 0;
	int c1 = 0;
	int c2 = 0;
	string key = to_string(n) + '|' + to_string(m) + '|' + to_string(sum);
	if(lookup.find(key) == lookup.end()){
		c1 = paths(a, n-1, m, sum - a[n][m]);
		c2 = paths(a, n, m-1, sum - a[n][m]);
		lookup[key] = c1 + c2;
	}
	return lookup[key];
}

int main() {
	int a[][4] = {
		{4, 7, 1, 6},
		{5, 7, 3, 9},
		{3, 2, 1, 2},
		{7, 1, 6, 3}
	};
	cout << paths(a, 3, 3, 25);
	for (itr = lookup.begin(); itr != lookup.end(); ++itr) { 
        cout << '\t' << itr->first 
             << '\t' << itr->second << '\n'; 
    } 
	return 0;
}

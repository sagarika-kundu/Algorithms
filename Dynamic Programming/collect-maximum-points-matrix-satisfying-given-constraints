#include <iostream>
#include<climits>
#include<algorithm>
using namespace std;
int CMP(auto &a, int n){
	int dp[n][n] = {0};
	int mx = 0;
	if(a[0][0] == -1)
		dp[0][0] = 0;
	else
		dp[0][0] = a[0][0];
	for(int j =1; j < n; j++){
		if(a[0][j] == -1)
			dp[0][j] = 0;
		else
			dp[0][j] = dp[0][j-1] + a[0][j];
	}
	for(int i =1; i <n; i++){
		if(i%2 == 0){
			for(int j =0; j<n; j++){
				if(a[i][j] == -1)
					dp[i][j] = 0;
				else
					dp[i][j] = max(dp[i][j-1], dp[i-1][j]) + a[i][j];
				mx = max(mx, dp[i][j]);
			}
		}
		else{
			for(int j =n-1; j>=0; j--){
				if(a[i][j] == -1)
					dp[i][j] = 0;
				else if(j == n-1)
					dp[i][j] = dp[i-1][j] + a[i][j];
				else
					dp[i][j] = max(dp[i-1][j], dp[i][j+1]) + a[i][j];
				mx = max(mx, dp[i][j]);
			}
		}
		
	}

		return mx;
	}

int main() {
	int a[][5] = {{1, 1, -1, 1, 1}, 
		{1, 0, 0, -1, 1},
		{1, 1, 1, 1, -1}, 
		{-1, -1, 1, 1, 1}, 
		{1, 1, -1, -1, 1}};
	cout << CMP(a, 5);
	return 0;
}
